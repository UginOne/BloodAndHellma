[gd_resource type="CanvasItemMaterial" load_steps=4 format=1]

[ext_resource path="res://faceMask.png" type="Texture" id=1]
[ext_resource path="res://faceNormal.png" type="Texture" id=2]

[sub_resource type="CanvasItemShader" id=1]

_code = {
"fragment": "uniform texture normal;

vec2 ywnormal=tex( normal,UV).wy * vec2(2.0,2.0) - vec2(1.0,1.0);
NORMAL=vec3(ywnormal,sqrt(1 - (ywnormal.x * ywnormal.x) - (ywnormal.y * ywnormal.y) ));
",
"fragment_ofs": 0,
"light": "// this is the half size of the tile in pixels

vec2 tile_vec=vec2(47,22);

// this mask is used to see which part of the tile is the background (^)
// or the foregronud (v)

uniform texture bg_mask;

bool behind = tex(bg_mask,UV).a>0.5;
float y_ofs;

if (behind) {
	// ^ part
	
	y_ofs = tile_vec.y*2 - abs(VAR1.x * tile_vec.y / tile_vec.x);
} else {
	// v part
	
	y_ofs = abs(VAR1.x * tile_vec.y / tile_vec.x);
}

vec2 point_2d = vec2(VAR1.x,(tile_vec.y - VAR1.y));

// compute a pseudo 3D point for both the light and the texel
// this makes the normalmap calculation work properly

vec3 point_3d = vec3( point_2d.x, point_2d.y - y_ofs, y_ofs );
vec3 light_3d = vec3(point_2d.x-LIGHT_VEC.x,LIGHT_HEIGHT,(-(VAR1.y - (LIGHT_VEC.y))+tile_vec.y));

//this could be optimized
//a rotation matrix is created to convert the normalmap vector
//to the same coordinate space as our pseudo 3d point and light

float r = asin(tile_vec.y / tile_vec.x);
mat3 rot_mat = mat3( vec3(1,0,0), vec3(0,cos(r),-sin(r)), vec3(0,sin(r),cos(r)));
vec3 n =  rot_mat * NORMAL;
n.y=-n.y;

//finally compute the dot product. Simple diffuse is computed here,
//but specular could be added and it will look prettier

float dp = max(dot(normalize(n),-normalize(light_3d-point_3d)),0);
LIGHT=vec4(vec3(dp),1.0)*COLOR*LIGHT_COLOR*3.0;

//finally, after light was cmoputed, make the light \"flat\"
//this makes the shadows work properly
//the +2 is added to avoid z-fighting between caster and pseudo 3d coords.

LIGHT_VEC.y+=point_3d.y+2;

",
"light_ofs": 0,
"vertex": "//assign the local vertex coordinates to a varying
//the center coordinates (0,0) matches the sprite center 
// (shows as a cross when the sprite is selected)

VAR1.xy=SRC_VERTEX;
",
"vertex_ofs": 0
}

[resource]

shader/shader = SubResource( 1 )
shader/shading_mode = 0
shader_param/normal = ExtResource( 2 )
shader_param/bg_mask = ExtResource( 1 )

